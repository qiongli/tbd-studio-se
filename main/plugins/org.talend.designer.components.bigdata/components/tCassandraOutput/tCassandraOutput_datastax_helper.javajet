<%@ jet %>
<%@ include file="@{org.talend.designer.components.bigdata}/components/tCassandraOutput/CQL_Helper.javajet"%>
<%
class CassandraOutputGenHelper{
	INode node;
	String cid;
    IMetadataTable metadata = null;
    IConnection conn = null;
    List<IMetadataColumn> columns = null;
    
	CQLManager cqlManager;
	public CassandraOutputGenHelper(INode node){
		this.node = node;
	}
	
	public void init(){
		cid = node.getUniqueName();
		List<IMetadataTable> metadatas = node.getMetadataList();
	    if((metadatas!=null) && (metadatas.size() > 0)){
	        metadata = metadatas.get(0);
	        if(metadata != null){
	    		columns = metadata.getListColumns();		
	    	}
	    }
	    List<? extends IConnection> conns = node.getIncomingConnections();
	    if(conns != null && conns.size() > 0 && conns.get(0).getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
	        conn = conns.get(0);
	    }
        cqlManager = new CQLManager(node, columns);
	}
	public String getCid(){
		return cid;
	}
	public IMetadataTable getMetadata(){
		return metadata;
	}
	public IConnection getConn(){
		return conn;
	}
	public List<IMetadataColumn> getColumns(){
		return columns;
	}
	public boolean validGen(){
		return columns == null || columns.isEmpty() || conn == null;
	}
	public CQLManager getCQLManager(){
		return cqlManager;
	}
	public void genConn(){
		boolean useExistConn = ElementParameterParser.getBooleanValue(node, "__USE_EXISTING_CONNECTION__");
    	String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
    	if(useExistConn){
		%>
			com.datastax.driver.core.Cluster cluster_<%=cid%> = (com.datastax.driver.core.Cluster)globalMap.get("cluster_<%=connection%>");
        	com.datastax.driver.core.Session connection_<%=cid%> = (com.datastax.driver.core.Session)globalMap.get("connection_<%=connection%>");
        <%
	    }else{  
	    %>
	        <%@ include file="@{org.talend.designer.components.bigdata}/components/tCassandraConnection/tCassandraConnection_datastax_connect.javajet"%>
	        resourceMap.put("cluster_<%=cid%>", cluster_<%=cid%>);
	        resourceMap.put("connection_<%=cid%>", connection_<%=cid%>);
	    <%
	    }
	    %>
	<%
	}
	
	public void genKSAction(){
		String keyspaceAction = ElementParameterParser.getValue(node, "__ACTION_ON_KEYSPACE__");
		String dataAction = ElementParameterParser.getValue(node, "__DATA_ACTION__");
		if(!"NONE".equals(keyspaceAction) && !"DELETE".equals(dataAction)){
	    	if("DROP_CREATE".equals(keyspaceAction)){
	    	%>
	    		connection_<%=cid%>.execute(<%=cqlManager.getDropKSSQL(false)%>);
	    		connection_<%=cid%>.execute(<%=cqlManager.getCreateKSSQL(false)%>);
	    	<%
	    	}else if("CREATE".equals(keyspaceAction)){
	    	%>
	    		connection_<%=cid%>.execute(<%=cqlManager.getCreateKSSQL(false)%>);
	    	<%
	    	}else if("CREATE_IF_NOT_EXISTS".equals(keyspaceAction)){
	    	%>
	    		connection_<%=cid%>.execute(<%=cqlManager.getCreateKSSQL(true)%>);
	    	<%
	    	}else if("DROP_IF_EXISTS_AND_CREATE".equals(keyspaceAction)){
	    	%>
	    		connection_<%=cid%>.execute(<%=cqlManager.getDropKSSQL(true)%>);
	    		connection_<%=cid%>.execute(<%=cqlManager.getCreateKSSQL(false)%>);
	    	<%
	    	}
	    }
	}
	
	public void genCFAction(){
		String tableAction = ElementParameterParser.getValue(node, "__ACTION_ON_COLUMN_FAMILY__");
	    String dataAction = ElementParameterParser.getValue(node, "__DATA_ACTION__");
		if(!"NONE".equals(tableAction) && !"DELETE".equals(dataAction)){
			if("DROP_CREATE".equals(tableAction)){
			%>
				connection_<%=cid%>.execute(<%=cqlManager.getDropTableSQL(false)%>);
	            connection_<%=cid%>.execute(<%=cqlManager.getCreateTableSQL(false)%>);
	            <%
	            if(cqlManager.containsUnsupportTypes()){
	            %>
	                System.err.println("Don't support create table with set/list/map");
	            <%
	            }
	            %>
			<%
			}else if("CREATE".equals(tableAction)){
			%>
				connection_<%=cid%>.execute(<%=cqlManager.getCreateTableSQL(false)%>);
	            <%
	            if(cqlManager.containsUnsupportTypes()){
	            %>
	                System.err.println("Don't support create table with set/list/map");
	            <%
	            }
	            %>
			<%
	        }else if("DROP_IF_EXISTS_AND_CREATE".equals(tableAction)){
	        %>
	            connection_<%=cid%>.execute(<%=cqlManager.getDropTableSQL(true)%>);
	            connection_<%=cid%>.execute(<%=cqlManager.getCreateTableSQL(false)%>);
	            <%
	            if(cqlManager.containsUnsupportTypes()){
	            %>
	                System.err.println("Don't support create table with set/list/map");
	            <%
	            }
	            %>
	        <%    
	        }else if("CREATE_IF_NOT_EXISTS".equals(tableAction)){
	        %>
	            connection_<%=cid%>.execute(<%=cqlManager.getCreateTableSQL(true)%>);
	            <%
	            if(cqlManager.containsUnsupportTypes()){
	            %>
	                System.err.println("Don't support create table with set/list/map");
	            <%
	            }
	            %>
	        <%
	        }else if("CLEAR".equals(tableAction)){
	        %>
	            connection_<%=cid%>.execute(<%=cqlManager.getDeleteTableSQL()%>);
	        <%
	        }else if("TRUNCATE".equals(tableAction)){
	        %>
	            connection_<%=cid%>.execute(<%=cqlManager.getTruncateTableSQL()%>);
	        <% 
	        }
	    }
	}
	
	public void genBatchUtilClass(){
		boolean useBatch = ElementParameterParser.getBooleanValue(node, "__USE_UNLOGGED_BATCH__");
		if(useBatch){
		%>
			class CassandraBatchUtil_<%=cid%> {
				java.util.List<Integer> keyPositions = new java.util.ArrayList<Integer>();
				public CassandraBatchUtil_<%=cid%>(com.datastax.driver.core.Cluster cluster, String keyspace, String table, List<String> columns){
			    	java.util.List<com.datastax.driver.core.ColumnMetadata> partitionKeys = cluster.getMetadata().getKeyspace(keyspace).getTable(table).getPartitionKey();
					java.util.List<String> partitionColumnKeys = new java.util.ArrayList<String>();
					for(com.datastax.driver.core.ColumnMetadata partitionKey : partitionKeys){
					    partitionColumnKeys.add(partitionKey.getName());
					}
					int position = 0;
					for(String col : columns){
						if(partitionColumnKeys.contains(col)){
							keyPositions.add(position);
						}
						position++;
					}
					
				}
				
				public java.nio.ByteBuffer getKey(com.datastax.driver.core.BoundStatement stmt){
					java.util.List<java.nio.ByteBuffer> keys = new java.util.ArrayList<java.nio.ByteBuffer>();
					for(int position : keyPositions){
						keys.add(stmt.getBytesUnsafe(position));
					}
					if(keys.size() == 1){
						return keys.get(0);
					}else{
						return composeKeys(keys);
					}
				}
				private java.nio.ByteBuffer composeKeys(java.util.List<java.nio.ByteBuffer> buffers){
					int totalLength = 0;
					for(java.nio.ByteBuffer buffer : buffers){
						totalLength += buffer.remaining() + 3;
					}
					java.nio.ByteBuffer out = java.nio.ByteBuffer.allocate(totalLength);
					for(java.nio.ByteBuffer buffer : buffers){
						java.nio.ByteBuffer bb = buffer.duplicate();
						out.put((byte)((bb.remaining() >> 8) & 0xFF));
					    out.put((byte)(bb.remaining() & 0xFF));
					    out.put(bb);
					    out.put((byte)0);
				    }
				    out.flip();
				    return out;
				}
			}
		<%	
		}
	}
	
	public void genInit(){
	%>
		int nb_line_<%=cid%> = 0;
	    com.datastax.driver.core.PreparedStatement prepareStmt_<%=cid%> = null;
	    prepareStmt_<%=cid%> = connection_<%=cid%>.prepare(<%=cqlManager.generatePreActionSQL()%>);
	    com.datastax.driver.core.BoundStatement boundStmt_<%=cid%> = null;
	    <%
		boolean useBatch = ElementParameterParser.getBooleanValue(node, "__USE_UNLOGGED_BATCH__");
	    if(useBatch){
			boolean groupBatchByKey = ElementParameterParser.getBooleanValue(node, "__GROUP_BATCH_BY_KEY__");
			if(groupBatchByKey){
	    	%>
		    	java.util.List<String> columns_<%=cid%> = new java.util.ArrayList<String>();	
		    	<%
		    	for(String col : cqlManager.getValueColumns()){
		    	%>
		    		columns_<%=cid%>.add("<%=col%>");
		    	<%	
		    	}
		    	%>
		    	CassandraBatchUtil_<%=cid%> cassandraBatchUtil_<%=cid%> = new CassandraBatchUtil_<%=cid%>(cluster_<%=cid%>, StringHandling.DQUOTE(<%=ElementParameterParser.getValue(node, "__KEY_SPACE__")%>), StringHandling.DQUOTE(<%=ElementParameterParser.getValue(node, "__COLUMN_FAMILY__")%>), columns_<%=cid%>);
				java.nio.ByteBuffer currentKey_<%=cid%> = null;     
				java.nio.ByteBuffer lastKey_<%=cid%> = null;
				boolean newOne_<%=cid%> = false;    
	    	<%
	    	}
	    	%>
	        com.datastax.driver.core.BatchStatement batchStmt_<%=cid%> = new com.datastax.driver.core.BatchStatement(com.datastax.driver.core.BatchStatement.Type.UNLOGGED);
	    <%
	    }else{
	    %>
	        boundStmt_<%=cid%> = new com.datastax.driver.core.BoundStatement(prepareStmt_<%=cid%>);
	    <%
	    }
	}
}
%>